import os
import requests
from fastapi import FastAPI
from pydantic import BaseModel
from dotenv import load_dotenv
from fastapi.middleware.cors import CORSMiddleware

load_dotenv()
HF_API_KEY = os.getenv("HF_API_KEY")

MODEL = "HuggingFaceH4/zephyr-7b-beta"

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ChatRequest(BaseModel):
    message: str

@app.post("/chat")
def chat(request: ChatRequest):
    url = f"https://api-inference.huggingface.co/models/{MODEL}"
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}
    data = {"inputs": request.message}

    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()

        result = response.json()

        if isinstance(result, list) and result and "generated_text" in result[0]:
            return {"reply": result[0]["generated_text"].strip()}
        elif isinstance(result, dict) and "generated_text" in result:
            return {"reply": result["generated_text"].strip()}
        else:
            return {"reply": "No response generated by the model."}

    except requests.exceptions.RequestException as e:
        return {"error": f"Failed to connect to Hugging Face API: {str(e)}"}

    except Exception as e:
        return {"error": f"An unexpected error occurred: {str(e)}"}